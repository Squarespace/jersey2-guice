plugins {
  id 'net.researchgate.release' version '2.3.4'
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.11'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  
  // UTF-8 should be standard by now. So use it!
  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
  
  group = 'com.squarespace.jersey2-guice'
  
  repositories {
    mavenCentral()
    mavenLocal()
    
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
  }
  
  configurations {
    provided
  }

  apply plugin: 'maven'

  task createPom << {
    pom {
      project {

        inceptionYear '2008'
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }
      }
    }.writeTo("pom.xml")
  }
}

subprojects {

  project.ext {
    guiceVersion = '4.0'
    jerseyVersion = '2.22.2'
    hk2Version = '2.4.0-b34'
  }

  // Telling Eclipse about the provided scope
  eclipse.classpath.plusConfigurations += [configurations.provided]

  // Telling IDEA about the provided scope
  idea {
    module {
      scopes.PROVIDED.plus += [configurations.provided]
    }
  }
    
  sourceSets {
    main {
      compileClasspath += configurations.provided
    }
    
    test {
      compileClasspath += configurations.provided
      runtimeClasspath += configurations.provided
    }
  }
  
  task integrationTest(type: Test) {
    useTestNG()
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    
    include '**/*IT.*'
    exclude '**/*Test.*'
  
    // fork a new java process every 10 test classes
    forkEvery = 10
  }
    
  test {
    useTestNG()
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
      
    exclude '**/*IT.*'
    include '**/*Test.*'
  }
  
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  
  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }
  
  artifacts {
    archives sourcesJar 
    archives javadocJar
  }
  
  javadoc {
    classpath += [configurations.provided]
    
    options.links('http://docs.oracle.com/javase/7/docs/api/', 
      'http://docs.oracle.com/javaee/7/api/',
      'http://google-guice.googlecode.com/git/javadoc/',
      'https://hk2.java.net/2.4.0-b32/apidocs/')
  }
  
  signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
  }
  
  task uploadSquarespace(type: Upload) {
    configuration = configurations.archives
    
    repositories {
      mavenDeployer {
        if (project.hasProperty('RELEASE_REPOSITORY_URL') 
            && project.hasProperty('SNAPSHOT_REPOSITORY_URL')) {
          repository(url: RELEASE_REPOSITORY_URL)
          snapshotRepository(url: SNAPSHOT_REPOSITORY_URL)
          
        } else {
          logger.error("RELEASE_REPOSITORY_URL and/or SNAPSHOT_REPOSITORY_URL missing.")
        }
      }
    }
  }
  
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        
        // NOTE: The 'MAVEN_CENTRAL_USERNAME' and 'MAVEN_CENTRAL_PASSWORD' are
        // stored in the ~/.gradle/gradle.properties file.
        
        if (project.hasProperty('MAVEN_CENTRAL_USERNAME') 
            && project.hasProperty('MAVEN_CENTRAL_PASSWORD')) {
          
          repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: MAVEN_CENTRAL_USERNAME, password: MAVEN_CENTRAL_PASSWORD)
          }
    
          snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
            authentication(userName: MAVEN_CENTRAL_USERNAME, password: MAVEN_CENTRAL_PASSWORD)
          }
        } else {
          logger.error("MAVEN_CENTRAL_USERNAME and/or MAVEN_CENTRAL_PASSWORD missing.")
        }
        
        pom.project {
          name 'Jersey 2.0 w/ Guice'
          packaging 'jar'
          description 'This library adds support for Jersey 2.0 w/ Guice'
          url 'https://github.com/Squarespace/jersey2-guice'
  
          scm {
            connection 'scm:git:https://github.com/Squarespace/jersey2-guice.git'
            developerConnection 'scm:git:https://github.com/Squarespace/jersey2-guice.git'
            url 'https://github.com/Squarespace/jersey2-guice'
          }
  
          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
  
          developers {
            developer {
              id 'Squarespace, Inc.'
              url 'http://www.squarespace.com'
            }
          }
        }
      }
    }
  }
}

dependencies {
  compile project(':jersey2-guice-impl')
}

release {
  failOnSnapshotDependencies = false
}

createReleaseTag.dependsOn ':jersey2-guice-impl:uploadArchives', ':jersey2-guice-impl:uploadSquarespace'
